rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
rbinom(1, prob = 0.01, size = 50)
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
pvec = rep(1/4, 4)
(rmultinom(1, prob = pvec, size = 8))
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
pvec = rep(1/4, 4)
(rmultinom(1, prob = pvec, size = 8))
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
theor_distr = rpois(n = 100, lambda = 0.05)
gof = goodfit(theor_distr, "poisson")
library("vcd")
library(vcd)
library("vcd")
install.packages("vcd")
```{r}
library("vcd")
theor_distr = rpois(n = 100, lambda = 0.05)
gof = goodfit(theor_distr, "poisson")
rootogram(gof)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
plot.new()
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
```
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
rtheta <- rbeta(n = 100000, shape1 = 5, shape2 = 35)
hist(rtheta) #quick and dirty plot on a vector
y <- rbinom(n = length(rtheta), prob =  rtheta, size = 300)
hist(y, breaks = 50, col = "orange", main = "", xlab = "Yos", probability = T)
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
pPostEmp = rtheta[ y == 40 ]
hist(pPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = "posterior p")
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
```
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
pPostEmp = rtheta[ y == 40 ]
hist(pPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = "posterior p")
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
```
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
pPostEmp = rtheta[ y == 40 ]
hist(pPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = "posterior p")
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
```
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
pPostEmp = rtheta[ y == 40 ]
hist(pPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = "posterior p")
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
```
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
pPostEmp = rtheta[ y == 40 ]
hist(pPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = "posterior p")
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
```
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
pPostEmp = rtheta[ y == 40 ]
hist(pPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = "posterior p")
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
```
y = vapply(rtheta,
function(x) rbinom(1, prob = x, size = 300),
integer(1))
pPostEmp = rtheta[ y == 40 ]
hist(pPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = "posterior p")
p_seq = seq(0, 1, by = 0.001)
densPostTheory = dbeta(p_seq, 40, 300)
lines(p_seq, densPostTheory, type = "l", lwd = 3)
sum(thetaPoatMC < 0.1)/1e6
sum(thetaPostMC < 0.1)/1e6
```{r, echo=FALSE}
thetaPostMC <- rbeta(n = 1e6, 45, 295)
mean(thetaPostMC)
sum(thetaPostMC < 0.1)/1e6
###Coefficients
beta_0 <- 3
beta_1 <- 2
beta_2 <- -3
beta_3 <- 0.3
set.seed(1)
X <- rnorm(200)
epsilon <- rnorm(200)
Y <- beta_0 + beta_1 * X  + epsilon
quick_df <-data.frame(X,Y) # if you are a tidyverse snob use tibble()
head(quick_df)
Y <- beta_0 + beta_1 * X + beta_2 + X^2 + beta_3 + X^3 + epsilon
Y <- beta_0 + beta_1 * X + beta_2 + X^2 + beta_3 + X^3 + epsilon
df <- data.frame(X, Y)
head(df)
curr_var_X <- var(X)
curr_var_X
curr_var_eps <- var(epsilon)
curr_var_eps
scaled_X <- X * sqrt(5 / curr_var_X)
scaled_X
scaled_X <- X * sqrt(5 / curr_var_X)
head(scaled_X)
scaled_X <- X * sqrt(5 / curr_var_X)
head(scaled_X)
var(scaled_X)
scaled_epsilon <- epsilon * sqrt(1 / curr_var_eps)
head(scaled_epsilon)
var(scaled_epsilon)
library(leaps)
install.packages('leaps')
```{r}
library(leaps)
quick_df <- data.frame(x=rnorm(200), y=rnorm(200))
my_formula <- "y ~ poly(x, 4)"
model4 <- lm(data = quick_df, my_formula)
names(model4)
(myAIC <- extractAIC(model4, k=2)) # check the help
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df)
summary(best_model)
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df)
summary(best_model)
names(summary(best_model))
names(summary(best_model))$bic
summary(best_model)$bic
bic <- summary(best_model)$bic
library(tidyverse)
bic <- summary(best_model)$bic
ggplot() +
geom_point(aes(x = df$y, y = bic))
library(tidyverse)
bic <- summary(best_model)$bic
ggplot() +
geom_point(aes(x = df$Y, y = bic))
View(df)
ggplot() +
geom_point(aes(x = 1:10, y = bic))
library(tidyverse)
bic <- summary(best_model)$bic
ggplot() +
geom_point(aes(x = 1:10, y = bic))
library(tidyverse)
bic <- summary(best_model)$bic
ggplot() +
geom_point(aes(x = 1:11, y = bic))
library(tidyverse)
bic <- summary(best_model)$bic
ggplot() +
geom_point(aes(x = 1:10, y = bic))
bic <- summary(best_model)$bic
bic
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df)
summary_info <- summary(best_model)
names(summary_info)
bic <- names(summary_info)$bic
bic <- summary_info$bic
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
model_nr_of_params <- summary_info$which[, nnz]
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
summary_info$which
model_nr_of_params <- summary_info$which[, nnz]
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
summary_info$which
model_nr_of_params <- summary_info$which[, "nnz"]
library(leaps)
df <- data.frame(x = rnorm(200), y = rnorm(200))
best_model <- regsubsets(y ~ poly(x, 10), data = df, nvmax = 10)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
summary_info$which
model_nr_of_params <- summary_info$which[, "nnz"]
library(tidyverse)
ggplot() +
geom_point(aes(x = 1:10, y = bic))
library(leaps)
X <- rnorm(200)
epsilon <- rnorm(200)
Y <- beta_0 + beta_1 * X + beta_2 + X^2 + beta_3 + X^3 + epsilon
df <- data.frame(x = X, y = Y)
best_model <- regsubsets(y ~ poly(x, 10), data = df, nvmax = 10)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
summary_info$which
model_nr_of_params <- summary_info$which[, "nnz"]
library(tidyverse)
ggplot() +
geom_point(aes(x = 1:10, y = bic))
library(tidyverse)
ggplot() +
geom_point(aes(x = 1:10, y = bic)) +
geom_line(aes(x = 1:10, y = bic))
library(leaps)
X <- rnorm(200)
epsilon <- rnorm(200)
Y <- beta_0 + beta_1 * X + beta_2 + X^2 + beta_3 + X^3 + epsilon
df <- data.frame(x = X, y = Y)
best_model <- regsubsets(y ~ poly(x, 10), data = df, nvmax = 10)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
best_model <- regsubsets(y ~ poly(x, 10), data = df, nvmax = 10, method = "backward")
summary_info_backward <- summary(best_model)
names(summary_info_backward)
bic_backward <- summary_info_backward$bic
ggplot() +
geom_point(aes(x = 1:10, y = bic_backward)) +
geom_line()
best_model <- regsubsets(y ~ poly(x, 10), data = df, nvmax = 10, method = "backward")
summary_info_backward <- summary(best_model)
names(summary_info_backward)
bic_backward <- summary_info_backward$bic
ggplot() +
geom_point(aes(x = 1:10, y = bic_backward)) +
geom_line(aes(x = 1:10, y = bic_backward))
library(leaps)
X <- rnorm(200)
epsilon <- rnorm(200)
Y <- beta_0 + beta_1 * X + beta_2 + X^2 + beta_3 + X^3 + epsilon
df <- data.frame(x = X, y = Y)
best_model <- regsubsets(y ~ poly(x, 10), data = df, nvmax = 10)
summary_info <- summary(best_model)
names(summary_info)
bic <- summary_info$bic
which.min(bic)
library(tidyverse)
ggplot(aes(x = seq(10), y = bic)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10))
ggplot(data = df, aes(x = seq(10), y = bic)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(10))
library(tidyverse)
ggplot() +
geom_point(aes(x = seq(10), y = bic)) +
geom_line(aes(x = seq(10), y = bic)) +
scale_x_continuous(breaks = seq(10))
library(tidyverse)
turtles = read.table("./PaintedTurtles.txt", header = TRUE) |>
tibble()
turtles
scaled_turtles <- scale(turtles[, 2:4], center = TRUE, scale = TRUE)
svd_turtles <- svd(scaled_turtles)
loadings <- svd_turtles$v
loadings
df_pca_turtles <- data.frame(pc1_manual, pc2_manual, turtles$sex)
pc1_manual <- scaled_turtles %*% loadings[, 1]
pc2_manual <- scaled_turtles %*% loadings[, 2]
df_pca_turtles <- data.frame(pc1_manual, pc2_manual, turtles$sex)
df_pca_turtles
pca_turtles <- prcomp(scaled_turtles)
pc1_turtles <- pca_turtles$x[, 1]
pc2_turtles <- pca_turtles$x[, 2]
standard_dev <- pca_turtles$sdev
df_2 <- data.frame(pc1_turtles, pc2_turtles, standard_dev)
ggplot(df_2, aes(pc1_turtles, standard_dev)) +
geom_col()
install.packages("tree")
library(ISLR2)
library(tree)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats, High)
View(Carseats)
tree.carseats <- tree(High ~ . - Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.carseats
set.seed(2)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train, ]
High.test <- High[-train]
tree.carseats <- tree(High ~ . - Sales, Carseats, subset = train)
tree.pred <- predict(object = tree.carseats, newx = Carseats.test, type = "class")
table(tree.pred, High.test)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train, ]
High.test <- High[-train]
tree.carseats <- tree(High ~ . - Sales, Carseats, subset = train)
tree.pred <- predict(object = tree.carseats, newx = Carseats.test, type = "class")
table(tree.pred, High.test)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train, ]
High.test <- High[-train]
tree.carseats <- tree(High ~ . - Sales, Carseats, subset = train)
tree.pred <- predict(object = tree.carseats, newx = Carseats.test, type = "class")
table(tree.pred, High.test)
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train, ]
High.test <- High[-train]
tree.carseats <- tree(High ~ . - Sales, Carseats, subset = train)
tree.pred <- predict(object = tree.carseats, newx = Carseats.test, type = "class")
table(tree.pred, High.test)
(79 + 33) / 200
set.seed(7)
cv.carseats <- cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow = c(1, 2))
plot(cv.carseats$size, cv.carseats$dev, type = "b")
plot(cv.carseats$k, cv.carseats$dev, type = "b")
prune.carseats <- prune.misclass(tree.carseats, best = 0)
plot(prune.carseats)
prune.carseats <- prune.misclass(tree.carseats, best = 9)
plot(prune.carseats)
text(prune.carseats, pretty = 0)
tree.pred <- predict(prune.carseats, Carseats.test, type = "class")
table(tree.pred, High.test)
(97 + 58) / 200
set.seed(1)
train <- sample(1:nrow(Boston), nrow(Boston) / 2)
tree.boston <- tree(medv ~ ., Boston, subset = train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston, pretty = 0)
cv.boston <- cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type = "b")
prune.boston <- prune.tree(tree.boston, best = 5)
plot(prune.boston)
text(prune.boston, pretty = 0)
yhat <- predict(tree.boston, newdata = Boston[-train, ])
boston.test <- Boston[-train, "medv"]
plot(yhat, boston.test)
abline(0, 1)
mean((yhat - boston.test)^2)
install.packages("randomForest")
library(randomForest)
set.seed(1)
bag.boston <- randomForest(medv ~ ., data = Boston)
library(randomForest)
set.seed(1)
bag.boston <- randomForest(medv ~ ., data = Boston, subset = train, mtry = 12, importance = TRUE)
bag.boston
set.seed(2)
train <- sample(1:nrow(Carseats), 200)
Carseats.test <- Carseats[-train, ]
High.test <- High[-train]
tree.carseats <- tree(High ~ . - Sales, Carseats, subset = train)
tree.pred <- predict(object = tree.carseats, newdata = Carseats.test, type = "class")
table(tree.pred, High.test)
(104 + 50) / 200
yhat.bag <- predict(object = bag.boston, newdata = Boston[-train, ])
plot(yhat.bag, boston.test)
yhat <- predict(tree.boston, newdata = Boston[-train, ])
boston.test <- Boston[-train, "medv"]
plot(yhat, boston.test)
abline(0, 1)
mean((yhat - boston.test)^2)
yhat.bag <- predict(object = bag.boston, newdata = Boston[-train, ])
plot(yhat.bag, boston.test)
abline(0, 1)
mean((yhat.bag - boston.test)^2)
yhat.bag <- predict(object = bag.boston, newdata = Boston[-train, ])
plot(yhat.bag, boston.test)
abline(0, 1)
mean((yhat.bag - boston.test)^2)
yhat.bag <- predict(object = bag.boston, newdata = Boston[-train, ])
plot(yhat.bag, boston.test)
abline(0, 1)
mean((yhat.bag - boston.test)^2)
bag.boston <- randomForest(medv ~ ., data = Boston, subset = train, mtry = 12, ntree = 25)
yhat.bag <- predict(object = bag.boston, newdata = Boston[-train, ])
mean((yhat.bag - boston.test)^2)
setwd("~/Documents/Tanulás/Bioinformatics MSc/02_Semester/Statistical and Machine Learning/Predictions/Round I/ALS_data_regression")
library(tidyverse)
df <- read_rds("ALS_progression_rate.1822x370.rds") |> as.data.frame()
df <- df |>
rename(response = dFRS)
View(df)
setwd("~/Documents/Tanulás/Bioinformatics MSc/02_Semester/Statistical and Machine Learning/Predictions/Round I/TCGA_cancer_classification")
df <- read_rds(file = "miniTCGA.3349x4006.rds")
View(df)
setwd("~/Documents/Tanulás/Bioinformatics MSc/02_Semester/Statistical and Machine Learning/Predictions/Round I/ALS_data_regression")
df <- read_rds("ALS_progression_rate.1822x370.rds") |> as.data.frame()
setwd("~/Documents/Tanulás/Bioinformatics MSc/02_Semester/Statistical and Machine Learning/Predictions/Round I/TCGA_cancer_classification")
dfd <- read_rds(file = "miniTCGA.3349x4006.rds")
View(dfd)
setwd("~/Documents/Tanulás/Bioinformatics MSc/02_Semester/Project/PiB/src")
library(tidyverse)
theme_set(theme_minimal())
halldorsson_child_counts <- read_rds("../data/halldorsson_child_counts.rds") |> as.data.frame()
halldorsson_child_fract <- read_rds("../data/halldorsson_child_fract.rds") |> as.data.frame()
View(halldorsson_child_counts)
